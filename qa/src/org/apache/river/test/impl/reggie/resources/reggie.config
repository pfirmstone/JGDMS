import net.jini.constraint.BasicMethodConstraints;
import net.jini.constraint.BasicMethodConstraints.MethodDesc;
import net.jini.core.constraint.ConnectionRelativeTime;
import net.jini.core.constraint.InvocationConstraint;
import net.jini.core.constraint.InvocationConstraints;
import net.jini.jeri.BasicILFactory;
import net.jini.jeri.BasicJeriExporter;
import net.jini.jeri.tcp.TcpServerEndpoint;
import org.apache.river.discovery.DiscoveryProtocolVersion;
import org.apache.river.discovery.UnicastSocketTimeout;
import java.net.InetAddress;
import java.net.NetworkInterface;


org.apache.river.reggie {
    discoveryConstraints = new BasicMethodConstraints(
        new MethodDesc[] {
            new MethodDesc("unicastDiscovery", 
                new InvocationConstraints(
                    new InvocationConstraint[] {
                        new UnicastSocketTimeout(180000), // 3*60*1000
                        new ConnectionRelativeTime(5000) // 
                    }, 
                    null
                )
            ),
            new MethodDesc("multicast*",
                new InvocationConstraints(
                    DiscoveryProtocolVersion.TWO, null                        
                )
            )    
        }
    );
    initialMemberGroups = new String[]{"org.apache.river.test.impl.reggie."
    	+ "MultihomedClientTest"};
    serverExporter = new BasicJeriExporter(
        TcpServerEndpoint.getInstance("localhost", 0),
        new AtomicILFactory(
            null,
            null,
            org.apache.river.reggie.proxy.Registrar.class
        )
    );
    unicastDiscoveryHost = "localhost";
}

net.jini.discovery.LookupDiscovery {
    multicastRequestHost = "localhost";
    multicastInterfaces = new NetworkInterface[]{};
    discoveryConstraints = new BasicMethodConstraints(
        new MethodDesc[] {            
            new MethodDesc( "multicast*",
                new InvocationConstraints(
                    DiscoveryProtocolVersion.TWO, null                        
                )
            )    
        }
    );
}
