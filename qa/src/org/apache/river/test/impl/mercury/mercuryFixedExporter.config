import net.jini.discovery.ConstrainableLookupLocator;
import net.jini.core.discovery.LookupLocator;
import net.jini.activation.ActivationExporter;
import net.jini.id.UuidFactory;
import net.jini.jeri.BasicJeriExporter;
import net.jini.jeri.BasicILFactory;
import net.jini.jeri.tcp.*;
import net.jini.security.BasicProxyPreparer;
import java.rmi.activation.ActivationID;
import net.jini.constraint.BasicMethodConstraints;
import net.jini.constraint.BasicMethodConstraints.MethodDesc;
import net.jini.core.constraint.InvocationConstraint;
import net.jini.core.constraint.InvocationConstraints;
import org.apache.river.discovery.MulticastTimeToLive;
import org.apache.river.test.impl.mercury.DelayedBasicJeriExporter;

multicast {
    private ttl = 1;
}

principal {
    /* 
     * JAAS principals
     */
    private static tester_keystore = KeyStores.getKeyStore(
	"file:${qa.home}/harness/trust/tester.keystore",
	"pkcs12", "testerpw");
    private static phoenix_keystore = KeyStores.getKeyStore(
	"file:${qa.home}/harness/trust/phoenix.keystore",
	"pkcs12", "phoenixpw");
    private static reggie_keystore = KeyStores.getKeyStore(
	"file:${qa.home}/harness/trust/reggie.keystore",
	"pkcs12", "reggiepw");
    private static mercury_keystore = KeyStores.getKeyStore(
	"file:${qa.home}/harness/trust/mercury.keystore",
	"pkcs12", "mercurypw");
    static tester = KeyStores.getX500Principal("tester", tester_keystore);
    static phoenix = KeyStores.getX500Principal("phoenix", phoenix_keystore);
    static reggie = KeyStores.getX500Principal("reggie", reggie_keystore);
    static mercury = KeyStores.getX500Principal("mercury", mercury_keystore);
}

org.apache.river.mercury {
    locatorConstraints = net.jini.discovery.LookupDiscovery.discoveryConstraints;
    activationSystemPreparer=new BasicProxyPreparer();
}

net.jini.lookup.JoinManager {
    registrarPreparer = new BasicProxyPreparer();
    registrationPreparer = new BasicProxyPreparer();
    serviceLeasePreparer = new BasicProxyPreparer();
}

net.jini.discovery.LookupDiscovery {
    registrarPreparer = new BasicProxyPreparer();
    discoveryConstraints = new BasicMethodConstraints(
        new MethodDesc[] {
            new MethodDesc(new InvocationConstraints(
                new InvocationConstraint[] {
                    new MulticastTimeToLive(multicast.ttl)
                },
                null
            ))
        }
    );
}

net.jini.discovery.LookupLocatorDiscovery {
    registrarPreparer = new BasicProxyPreparer();
}

exporter {
    private fixedUuid = UuidFactory.create(999L,999L);
    private fixedDelay = 60000L;
    name = "org.apache.river.mercury.serverExporter";
    private defaultendpoint = TcpServerEndpoint.getInstance(9999);
    private defaultfactory = new BasicILFactory();
    activatableExporter = new ActivationExporter(
                        (ActivationID) $data,
                        new DelayedBasicJeriExporter(defaultendpoint, 
					      defaultfactory,
                                              false,
                                              true,
                                              fixedUuid,
                                              fixedDelay));
    persistentExporter = 
        new DelayedBasicJeriExporter(
            defaultendpoint, defaultfactory, false, true, fixedUuid, fixedDelay);
    transientExporter = 
        new DelayedBasicJeriExporter(
            defaultendpoint, defaultfactory, false, true, fixedUuid, fixedDelay);
}


