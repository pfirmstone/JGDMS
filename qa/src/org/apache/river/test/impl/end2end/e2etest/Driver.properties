#DBGSEC
java.security.debug="policy,access,failure"

#DBGRMICLIENT
#sun.rmi.client.logCalls=true

#DBGJSSE
#javax.net.debug=all


# Test logging flags :
# all
# boundaries
# calls
# proxyConstraints
# clientSubject
# clientConstraints
# combinedConstraints
# debug
# endpointCount
# failures
# finalStatistics
# info
# internalCalls
# memory
# params
# return
# runningStatistics
# serverConstraints
# suite
end2end.logArgs=boundaries,failures,finalStatistics

#WRAPPERLOG
#jsseWrapper.logArgs=calls,returns

#ABORTFLAG
#end2end.abortOnFail=false

#LOGUNBUFFERED
#end2end.logUnbuffered=true

#INHIBITWRAPPER
#end2end.inhibitWrapper=true

# if > 1, the coverage factor for the test. For instance, a coverage
# value of 50 would result in approximately 1 out of 50 * 50 = 2500
# methods being called.
end2end.coverage=50

# if defined and coverage > 1, this is the seed value to use to initialize
# the random number generator. This allows a failed run to be reproduced
#end2end.seed=

#HTTPS
#end2end.https=true

#GUIFLAG
#end2end.displayGUI=true

# if true, strong encryption should be supported by the provider
# if false, only weak encryption should be supported by the provider
# other values, or no value, are ignored
#end2end.strongSupported=

# number of connections to keep open rather than switch
sun.rmi.transport.switchConstraintsFloor=10

#EXITFLAG
#end2end.exit=true

#DBGRMI
#java.rmi.server.logCalls=true
#sun.rmi.server.logLevel=20
#sun.rmi.client.logCalls=true
#sun.rmi.security.debug=true
#sun.rmi.loader.logLevel=verbose

#Thread Count
threadCount=1

#Principals
clientDSA1Alias=clientDSA1
clientDSA1DN=CN=clientDSA1
clientDSA2Alias=clientDSA2
clientDSA2DN=CN=clientDSA2
clientRSA1Alias=clientRSA1
clientRSA1DN=CN=clientRSA1
clientRSA2Alias=clientRSA2
clientRSA2DN=CN=clientRSA2
kerberosClient=${org.apache.river.qa.harness.kerberos.clientPrincipal}
serverDSAAlias=serverDSA
serverDSADN=CN=serverDSA
serverRSAlias=serverRSA
serverRSADN=CN=serverRSA
kerberosServer=${org.apache.river.qa.harness.kerberos.serverPrincipal}


#The following values are likely to be modified by a user
org.apache.river.test.jars=${org.apache.river.test.home}$/lib
org.apache.river.jsk.jars=${jsk.home}$/lib
codebaseDirectory=${org.apache.river.test.home}$/lib
keyStoreFile=<file:resources/keystore>
javax.net.ssl.keyStore=<file:resources/keystore>
javax.net.ssl.keyStorePassword=keypass
javax.net.ssl.trustStore=<file:resources/keystore>
javax.net.ssl.trustStorePassword=keypass
keyStorePasswordFile=<file:resources/keystore.password>
policy=<url:policies/end2end.policy>
serverCodebase=<url:lib/qa1-end2end.jar>
clientCodebase=<url:lib/qa1-end2end.jar>
java.rmi.server.codebase=<url:lib/qa1-end2end.jar>
testClassPath=${jsk.home}$/lib${file.separator}jsk-platform.jar${path.separator}${jsk.home}$/qa/lib/qa1-wrapper.jar${path.separator}${jsk.home}$/qa/lib/qa1-end2end.jar

#kerberos properties

###############################################################
#The following properties are commented out as a work around
#required for W2K - The properties are commented out so that
#krb5.conf will be used.  Specifying forwardable=true in
#krb5.conf is the only known mechanism for getting java to
#report that a ticket is forwardable in W2K
###############################################################
#java.security.krb5.realm=${org.apache.river.qa.harness.kerberos.realm}
#java.security.krb5.kdc=${org.apache.river.qa.harness.kerberos.kdc}

javax.security.auth.useSubjectCredsOnly=false
java.security.auth.login.config=<url:e2etest/Driver.login>
clientKeytabLocation=${org.apache.river.qa.harness.kerberos.aggregatePasswordFile}
serverKeytabLocation=${org.apache.river.qa.harness.kerberos.aggregatePasswordFile}

