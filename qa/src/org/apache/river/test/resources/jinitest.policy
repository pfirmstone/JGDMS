grant codebase "file:${org.apache.river.test.home}${/}lib${/}fullloggingfilter.jar" {
	permission org.apache.river.start.SharedActivationPolicyPermission "/-";
	permission org.apache.river.start.SharedActivationPolicyPermission "\\-";
	permission org.apache.river.start.SharedActivationPolicyPermission "file:/-";
	permission org.apache.river.start.SharedActivationPolicyPermission "jar:file:/-";
	permission org.apache.river.start.SharedActivationPolicyPermission "jar:file:c:/-";
	permission org.apache.river.start.SharedActivationPolicyPermission "jar:file:c:\\-";
};

grant principal javax.security.auth.x500.X500Principal "CN=Tester" 
{
    permission java.net.URLPermission "http://${java.rmi.server.hostname}:9082/qa1-start-testservice1-dl.jar", "GET:";
    permission java.net.URLPermission "http://${java.rmi.server.hostname}:9082/qa1-start-testservice2-dl.jar", "GET:";
    permission java.net.URLPermission "http://${java.rmi.server.hostname}:9082/qa1-start-testservice-common-dl.jar", "GET:";
    permission java.net.URLPermission "http://${java.rmi.server.hostname}:9080/reggie-dl-${river.version}.jar", "GET:";
    permission java.net.URLPermission "http://${java.rmi.server.hostname}:9080/jgdms-lib-dl-${river.version}.jar", "GET:";
    permission java.lang.RuntimePermission "modifyThread";
    permission java.lang.RuntimePermission "modifyThreadGroup";
};

grant codebase "file:${org.apache.river.jsk.home}${/}lib${/}${org.apache.river.tool.classserver.jar}" {
    permission java.security.AllPermission "", "";
};

// Discovery providers that don't perform authentication don't grant
// DeSerializationPermission, so it's granted here.
grant codebase "http://*/reggie-dl.jar" {
    permission org.apache.river.api.io.DeSerializationPermission "ATOMIC";
};

// Discovery providers that don't perform authentication don't grant
// DeSerializationPermission, so it's granted here.
grant codebase "http://*/jsk-dl.jar" {
    permission org.apache.river.api.io.DeSerializationPermission "ATOMIC";
};

// Discovery providers that don't perform authentication don't grant
// DeSerializationPermission, so it's granted here.
grant codebase "http://*/qa1-lookup-simulator-dl.jar" {
    permission org.apache.river.api.io.DeSerializationPermission "ATOMIC";
};

grant codebase "http://*/phoenix-dl.jar" {
    permission org.apache.river.api.io.DeSerializationPermission "ATOMIC";
    permission org.apache.river.api.io.DeSerializationPermission "MARSHALL";
};

grant {
    permission java.lang.RuntimePermission "accessClassInPackage.sun.util.logging.resources";
    permission java.lang.RuntimePermission "accessClassInPackage.com.sun.proxy";
    permission java.util.PropertyPermission "java.system.class.loader", "read";
    permission java.io.FilePermission "${org.apache.river.test.home}${/}lib${/}-", "read";
    permission java.util.PropertyPermission "org.apache.river.reggie.enableImplToStubReplacement", "read";
    permission java.lang.RuntimePermission "accessClassInPackage.sun.security.util";
    permission java.lang.RuntimePermission "accessClassInPackage.jdk.internal.misc";
    permission java.lang.RuntimePermission "accessClassInPackage.sun.security.ssl";
    permission java.lang.RuntimePermission "accessClassInPackage.sun.security.action";
    permission java.lang.RuntimePermission "getClassLoader";
};

//JDK9
// Java 8 sun policy provider cannot read, as there is no jrt URLHandler
// ConcurrentPolicyFile can handle these as it uses RFC3968 URI.
grant codebase "jrt:/jdk.security.auth" {
    permission java.io.FilePermission "${org.apache.river.test.home}${/}src${/}org${/}apache${/}river${/}test${/}spec${/}jeri${/}transport${/}resources${/}keystore.password" "read";
    permission java.io.FilePermission "${org.apache.river.test.home}${/}src${/}org${/}apache${/}river${/}test${/}spec${/}jeri${/}transport${/}resources${/}keystore" "read";
    permission javax.security.auth.AuthPermission "modifyPrincipals";
    permission javax.security.auth.AuthPermission "modifyPublicCredentials";
    permission javax.security.auth.AuthPermission "modifyPrivateCredentials";
};

grant codebase "jrt:/jdk.security.auth" {
    permission java.security.AllPermission "", "";
};

grant codebase "jrt:/jdk.crypto.cryptoki" {
    permission java.security.AllPermission "", "";
};

grant codebase "jrt:/java.smartcardio" {
    permission java.security.AllPermission "", "";
};

grant codebase "jrt:/java.xml.crypto" {
    permission java.security.AllPermission "", "";
};

grant codebase "jrt:/java.security.jgss" {
    permission java.security.AllPermission "", "";
};

grant codebase "jrt:/jdk.crypto.ec" {
    permission java.security.AllPermission "", "";
};

grant codebase "jrt:/jdk.crypto.mscapi" {
    permission java.security.AllPermission "", "";
};

grant codebase "jrt:/jdk.localedata" {
    permission java.security.AllPermission "", "";
};

grant codebase "jrt:/jdk.security.jgss" {
    permission java.security.AllPermission "", "";
};

grant {
    permission org.apache.river.phoenix.ExecOptionPermission "*";
    // for a start test
    permission org.apache.river.phoenix.ExecPermission "/bin/javax";
    permission java.util.PropertyPermission "FILEPOLICY02", "read";
    permission java.security.SecurityPermission "getPolicy";
    // for Outrigger's proxy
    permission java.util.PropertyPermission "org.apache.river.outrigger.maxServerQueryTimeout", "read";
};

grant codebase "file:${org.apache.river.test.home}${/}lib${/}qa1-start-tests.jar" {
    permission java.security.AllPermission "", "";
};

grant codebase "file:${org.apache.river.test.home}${/}lib${/}qa1-io-marshalledinstance-test.jar" {
    permission java.security.AllPermission "", "";
};

grant codebase "file:${org.apache.river.test.home}${/}lib${/}qa1-io-marshalinputstream-test.jar" {
    permission java.security.AllPermission "", "";
};

// Grants required for jdk1.6 combined with source=5 and target=jsr14
// I think this has something to do with the new java 6 Policy implementation,
// the visibility of our policy implementations on the boot classpath and
// jdk1.6 compiler optimisations. See River-334
grant codebase "file:${org.apache.river.jsk.home}${/}lib-ext${/}*" {
    permission java.security.AllPermission "", "";
    //permission java.security.SecurityPermission "getProperty.net.jini.security.policy.PolicyFileProvider.basePolicyClass";
    //permission java.util.PropertyPermission "java.security.policy", "read";
    //permission java.util.PropertyPermission "java.security.policy", "write";
    //permission java.lang.RuntimePermission "accessClassInPackage.sun.security.provider";
    //permission java.lang.RuntimePermission "getProtectionDomain";
    //permission net.jini.security.GrantPermission "java.security.AllPermission \"\", \"\"";
};

// Grants required for jdk1.6 combined with source=5 and target=jsr14
// I think this has something to do with the new java 6 Policy implementation,
// the visibility of our policy implementations on the boot classpath and
// jdk1.6 compiler optimisations. See River-334
grant codebase "file:${org.apache.river.test.home}${/}lib-ext${/}*" {
    permission java.security.AllPermission "", "";
};

grant codebase "file:${org.apache.river.qa.harness.testJar}" {
    permission net.jini.security.GrantPermission
        "java.security.AllPermission \"\", \"\"";
};

grant codebase "file:${org.apache.river.jsk.home}${/}lib${/}${org.cliffc.high_scale_lib.jar}" {
    permission java.lang.RuntimePermission "accessDeclaredMembers";
    permission java.lang.RuntimePermission "accessClassInPackage.sun.misc";
    permission java.lang.reflect.ReflectPermission "suppressAccessChecks";
};

// grants for various test services, placed here for simplicity, but
// should probably be separated into separate, targeted policy files

// grants needed by mahalo, mercury and simulator - this might be a bit broad

grant codebase "file:${org.apache.river.test.home}${/}lib${/}qa1-mercury-bogusimpl.jar" {
    permission java.security.AllPermission "", "";
};

grant codebase "file:${org.apache.river.test.home}${/}lib${/}qa1-lookup-simulator.jar" {
    permission java.security.AllPermission "", "";
};

// grants needed by the activatable and non activatable groups

grant codebase "file:${org.apache.river.test.home}${/}lib${/}qa1-start-probe.jar" {
    permission org.apache.river.start.SharedActivationPolicyPermission "jar:file:${org.apache.river.qa.harness.harnessJar}!/harness/policy/all.policy";
    permission org.apache.river.start.SharedActivationPolicyPermission "jar:file:${org.apache.river.qa.harness.harnessJar}!/harness/policy/policy.all";
    permission org.apache.river.start.SharedActivationPolicyPermission "file:${org.apache.river.qa.home}${/}harness${/}policy${/}policy.all";
};

grant codebase "file:${org.apache.river.test.home}${/}lib${/}qa1-start-testservice1.jar" {
    permission org.apache.river.start.SharedActivationPolicyPermission "jar:file:${org.apache.river.qa.harness.harnessJar}!/harness/policy/all.policy";
    permission org.apache.river.start.SharedActivationPolicyPermission "jar:file:${org.apache.river.qa.harness.harnessJar}!/harness/policy/policy.all";
    permission org.apache.river.start.SharedActivationPolicyPermission "file:${org.apache.river.qa.home}${/}harness${/}policy${/}policy.all";
    permission org.apache.river.start.SharedActivationPolicyPermission "file:${org.apache.river.qa.home}${/}harness${/}policy${/}all.policy";
};

grant codebase "file:${org.apache.river.test.home}${/}lib${/}qa1-start-testservice2.jar" {
    permission org.apache.river.start.SharedActivationPolicyPermission "jar:file:${org.apache.river.qa.harness.harnessJar}!/harness/policy/all.policy";
    permission org.apache.river.start.SharedActivationPolicyPermission "jar:file:${org.apache.river.qa.harness.harnessJar}!/harness/policy/policy.all";
    permission org.apache.river.start.SharedActivationPolicyPermission "file:${org.apache.river.qa.home}${/}harness${/}policy${/}all.policy";
};

// XXX funny install dir, but taken from old harness impl
grant codebase "file:${org.apache.river.jsk.home}${/}lib${/}mercury_bogus.jar" {
    permission org.apache.river.start.SharedActivationPolicyPermission "jar:file:${org.apache.river.qa.harness.harnessJar}!/harness/policy/defaultsecuremercury.policy";
    permission org.apache.river.start.SharedActivationPolicyPermission "jar:file:${org.apache.river.qa.harness.harnessJar}!/harness/policy/sec-jeri-mercury.policy";
    permission org.apache.river.start.SharedActivationPolicyPermission "jar:file:${org.apache.river.qa.harness.harnessJar}!/harness/policy/all.policy";
    permission org.apache.river.start.SharedActivationPolicyPermission "jar:file:${org.apache.river.qa.harness.harnessJar}!/harness/policy/policy.all";
    permission org.apache.river.start.SharedActivationPolicyPermission "jar:file:${org.apache.river.qa.harness.harnessJar}!/harness/policy/defaultmercury.policy";
    permission org.apache.river.start.SharedActivationPolicyPermission "file:${org.apache.river.qa.home}${/}harness${/}policy${/}defaultsecuremercury.policy";
    permission org.apache.river.start.SharedActivationPolicyPermission "file:${org.apache.river.qa.home}${/}harness${/}policy${/}sec-jeri-mercury.policy";
    permission org.apache.river.start.SharedActivationPolicyPermission "file:${org.apache.river.qa.home}${/}harness${/}policy${/}all.policy";
    permission org.apache.river.start.SharedActivationPolicyPermission "file:${org.apache.river.qa.home}${/}harness${/}policy${/}policy.all";
    permission org.apache.river.start.SharedActivationPolicyPermission "file:${org.apache.river.qa.home}${/}harness${/}policy${/}defaultmercury.policy";

};

grant codebase "file:${org.apache.river.jsk.home}${/}lib${/}${org.apache.river.mahalo.jar}" {
    permission org.apache.river.start.SharedActivationPolicyPermission "file:${org.apache.river.test.home}${/}src${/}com${/}sun${/}jini${/}test${/}impl${/}mahalo${/}bogusMahaloImpl.policy";
    permission org.apache.river.start.SharedActivationPolicyPermission "jar:file:${org.apache.river.qa.harness.testJar}!/org/apache/river/test/impl/mahalo/bogusMahaloImpl.policy";
};

grant codebase "file:${org.apache.river.jsk.home}${/}lib-dl${/}${org.apache.river.mahalo.dl.jar}" {
    permission org.apache.river.start.SharedActivationPolicyPermission "file:${org.apache.river.test.home}${/}src${/}com${/}sun${/}jini${/}test${/}impl${/}mahalo${/}bogusMahaloImpl.policy";
    permission org.apache.river.start.SharedActivationPolicyPermission "jar:file:${org.apache.river.qa.harness.testJar}!/org/apache/river/test/impl/mahalo/bogusMahaloImpl.policy";
};

grant codebase "file:${org.apache.river.jsk.home}${/}lib${/}${org.apache.river.mercury.jar}" {
    permission org.apache.river.start.SharedActivationPolicyPermission "file:${org.apache.river.test.home}${/}src${/}com${/}sun${/}jini${/}test${/}impl${/}mahalo${/}bogusMahaloImpl.policy";
    permission org.apache.river.start.SharedActivationPolicyPermission "jar:file:${org.apache.river.qa.harness.testJar}!/org/apache/river/test/impl/mahalo/bogusMahaloImpl.policy";
};
