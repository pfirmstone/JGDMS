//JERI imports
import net.jini.core.constraint.ClientMaxPrincipal;
import net.jini.core.constraint.ClientAuthentication;
import net.jini.core.constraint.Delegation;
import net.jini.core.constraint.InvocationConstraint;
import net.jini.core.constraint.InvocationConstraints;
import net.jini.jeri.ServerEndpoint;
import net.jini.jeri.ssl.SslServerEndpoint;
import net.jini.jeri.ssl.SslEndpoint;
import javax.security.auth.login.LoginContext;

//javax.security
import javax.security.auth.x500.X500Principal;

org.apache.river.test.spec.jeri.serverendpoint {
    //Endpoint to run interface based tests against
    endpoint = SslServerEndpoint.getInstance(9090);
    //Endpoints for Equality tests
    equalEndpoint = SslServerEndpoint.getInstance(9090);
    diffEndpoint = SslServerEndpoint.getInstance(9091);
    //Number of listen endpoint expected
    expectedListenEndpoints = new Integer(1);
    //Set to true if hasNext() is expected to return true at least once
    usefulIterator = new Boolean(true);
    //ServerEndpoint factory class
    serverEndpointFactory = SslServerEndpoint.class;
    //Endpoint factory class
    endpointFactory = SslEndpoint.class;
    //Conflicting InvovationConstraints
    private principal1 = new X500Principal("CN=clientRSA");
    private principal2 = new X500Principal("CN=clientDSA");
    private maxPrincipal1 = new ClientMaxPrincipal(principal1);
    private maxPrincipal2 = new ClientMaxPrincipal(principal2);
    conflictingConstraints = new InvocationConstraints(
        new InvocationConstraint[]{ClientAuthentication.YES,maxPrincipal1,maxPrincipal2},
        new InvocationConstraint[]{});
    //Unsupported InvocationConstraints
    unsupportedConstraints = new InvocationConstraints(
        new InvocationConstraint[]{ClientAuthentication.YES,Delegation.YES},
        new InvocationConstraint[]{});
    //Integrity Supported
    integritySupported = new Boolean(true);
}

principal {
    /*
     * JAAS principals
     */
    private static tester_keystore = KeyStores.getKeyStore(
	"file:${qa.home}/harness/trust/tester.keystore",
	"pkcs12", "testerpw");

    static tester = KeyStores.getX500Principal("tester", tester_keystore);
}

org.apache.river.qa.harness.config {
    props = "";
}
