/* Configuration source file for SSL Mercury */

import org.apache.river.phoenix.*;
import net.jini.activation.*;
import net.jini.config.*;
import net.jini.constraint.*;
import net.jini.core.constraint.*;
import net.jini.jeri.*;
import net.jini.jeri.*;
import net.jini.jeri.ssl.HttpsServerEndpoint;
import net.jini.jeri.security.*;
import net.jini.security.*;
import net.jini.security.proxytrust.*;
import net.jini.export.ExportPermission;
import org.apache.river.config.KeyStores;
import java.rmi.activation.ActivationID;
import java.security.Permission;
import java.util.Collections;
import javax.security.auth.login.LoginContext;

org.apache.river.test.impl.mercury.listener {

    /* 
     * JAAS login and principals
     */
    loginContext = new LoginContext("org.apache.river.Test");
    private static keystore = KeyStores.getKeyStore(
        "file:${qa.home}/harness/trust/truststore",
			     null);
    /* Principals */
    static mercury =
	KeyStores.getX500Principal("mercury", keystore);
    private static phoenix =
	KeyStores.getX500Principal("phoenix", keystore);
    private static reggie = 
	KeyStores.getX500Principal("reggie", keystore);
    static tester = 
	KeyStores.getX500Principal("tester", keystore);

    /*
     * Service exporter and client proxy preparers
     */
    exporter = 
	    new BasicJeriExporter(
		    HttpsServerEndpoint.getInstance(0),
	            new ProxyTrustILFactory(
                        new BasicMethodConstraints(
		            new InvocationConstraints(
		                new InvocationConstraint[]{
			            Integrity.YES,
			            ClientAuthentication.YES}, null)),
	                ExportPermission.class));
}

/* the preparer that a test should use for the generator's proxy */
preparer {
   //Not used
}

