/* Configuration source file for SSL Mercury */

import org.apache.river.phoenix.*;
import net.jini.activation.*;
import net.jini.config.*;
import net.jini.constraint.*;
import net.jini.core.constraint.*;
import net.jini.jeri.*;
import net.jini.jeri.*;
import net.jini.jeri.ssl.SslServerEndpoint;
import net.jini.jeri.security.*;
import net.jini.security.*;
import net.jini.security.proxytrust.*;
import net.jini.export.ExportPermission;
import org.apache.river.config.KeyStores;
import java.rmi.activation.ActivationID;
import java.security.Permission;
import java.util.Collections;
import javax.security.auth.login.LoginContext;

principal {
    /* 
     * JAAS principals
     */
    private static tester_keystore = KeyStores.getKeyStore(
	"file:${org.apache.river.qa.home}/harness/trust/tester.keystore",
	"pkcs12", "testerpw");
    private static phoenix_keystore = KeyStores.getKeyStore(
	"file:${org.apache.river.qa.home}/harness/trust/phoenix.keystore",
	"pkcs12", "phoenixpw");
    private static reggie_keystore = KeyStores.getKeyStore(
	"file:${org.apache.river.qa.home}/harness/trust/reggie.keystore",
	"pkcs12", "reggiepw");
    private static mercury_keystore = KeyStores.getKeyStore(
	"file:${org.apache.river.qa.home}/harness/trust/mercury.keystore",
	"pkcs12", "mercurypw");
    private static group_keystore = KeyStores.getKeyStore(
	"file:${org.apache.river.qa.home}/harness/trust/group.keystore",
	"pkcs12", "grouppw");
    static tester = KeyStores.getX500Principal("tester", tester_keystore);
    static phoenix = KeyStores.getX500Principal("phoenix", phoenix_keystore);
    static reggie = KeyStores.getX500Principal("reggie", reggie_keystore);
    static mercury = KeyStores.getX500Principal("mercury", mercury_keystore);
    static group = KeyStores.getX500Principal("group", group_keystore);
}

org.apache.river.qa.harness.GroupImpl {

    /* 
     * JAAS login
     */
    loginContext = new LoginContext("org.apache.river.Group");

}

org.apache.river.test.impl.mercury.listener {

    /* 
     * JAAS login
     */
    loginContext = new LoginContext("org.apache.river.Test");


    /*
     * Service exporter and client proxy preparers
     */
    exporter = 
	    new BasicJeriExporter(
                SslServerEndpoint.getInstance(0),
                new BasicILFactory(
                    new BasicMethodConstraints(
                        new InvocationConstraints(
                            new InvocationConstraint[]{
                                Integrity.YES,
                                ClientAuthentication.YES}, null)
                    ),
                    ExportPermission.class
                )
            );
}

/* the preparer that a test should use for the generator's proxy */
preparer {
   //Not used
}

