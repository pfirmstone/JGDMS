grant codebase "file:${org.apache.river.qa.home}${/}lib${/}nonactivatablegroup.jar" {
    permission java.security.AllPermission "", "";
};

grant codebase "file:${org.apache.river.jsk.home}${/}lib${/}*
{
    permission java.security.AllPermission "", "";
};

grant codebase "file:${org.apache.river.jsk.home}${/}lib-dl${/}*
{
    permission java.security.AllPermission "", "";
};

grant codebase "jrt:/jdk.security.auth" {
    permission java.security.AllPermission "", "";
};

grant codebase "jrt:/jdk.crypto.cryptoki" {
    permission java.security.AllPermission "", "";
};

grant codebase "jrt:/java.smartcardio" {
    permission java.security.AllPermission "", "";
};

grant codebase "jrt:/java.xml.crypto" {
    permission java.security.AllPermission "", "";
};

grant codebase "jrt:/java.security.jgss" {
    permission java.security.AllPermission "", "";
};

grant codebase "jrt:/jdk.crypto.ec" {
    permission java.security.AllPermission "", "";
};

grant codebase "jrt:/jdk.crypto.mscapi" {
    permission java.security.AllPermission "", "";
};

grant codebase "jrt:/jdk.localedata" {
    permission java.security.AllPermission "", "";
};

grant codebase "jrt:/jdk.security.jgss" {
    permission java.security.AllPermission "", "";
};

// Discovery providers that don't perform authentication don't grant
// DeSerializationPermission, so it's granted here.
grant codebase "http://${HOST}/${net.jini.lib.dl.jar}" {
    permission org.apache.river.api.io.DeSerializationPermission "ATOMIC";
    permission org.apache.river.api.io.DeSerializationPermission "MARSHALL";
    permission org.apache.river.api.io.DeSerializationPermission "ENTRY";
    permission java.lang.RuntimePermission "getClassLoader";
};

grant codebase "file:${org.apache.river.qa.home}${/}lib${/}harness-killer.jar" {
    permission org.apache.river.start.SharedActivationPolicyPermission "jar:file:${org.apache.river.qa.harness.harnessJar}!${/}harness${/}policy${/}all.policy";
    permission org.apache.river.start.SharedActivationPolicyPermission "jar:file:${org.apache.river.qa.harness.harnessJar}!${/}harness/policy/policy.all";
}; 

grant codebase "file:${org.apache.river.qa.home}${/}lib/harness-killer.jar" {
    permission org.apache.river.start.SharedActivationPolicyPermission "file:${org.apache.river.qa.home}${/}harness${/}policy${/}all.policy";
    permission org.apache.river.start.SharedActivationPolicyPermission "file:${org.apache.river.qa.home}${/}harness${/}policy${/}policy.all";
}; 

grant {
    permission org.apache.river.api.io.DeSerializationPermission "ATOMIC";
    permission org.apache.river.api.io.DeSerializationPermission "ENTRY";
    permission org.apache.river.api.io.DeSerializationPermission "MARSHALL";
    permission java.lang.RuntimePermission "accessClassInPackage.com.sun.proxy";
};
