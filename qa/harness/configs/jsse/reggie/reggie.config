import org.apache.river.config.KeyStores;
import org.apache.river.discovery.ClientPermissionChecker;
import org.apache.river.discovery.DiscoveryProtocolVersion;
import org.apache.river.discovery.MulticastMaxPacketSize;
import org.apache.river.discovery.MulticastTimeToLive;
import org.apache.river.discovery.UnicastSocketTimeout;

import java.util.Collections;

import java.security.Permission;

import net.jini.activation.arg.ActivationID;

import javax.security.auth.login.LoginContext;

import net.jini.activation.ActivationExporter;
import net.jini.constraint.StringMethodConstraints;
import net.jini.constraint.StringMethodConstraints.StringMethodDesc;
import net.jini.core.constraint.AtomicInputValidation;
import net.jini.core.constraint.ClientAuthentication;
import net.jini.core.constraint.ClientMinPrincipal;
import net.jini.core.constraint.Integrity;
import net.jini.core.constraint.InvocationConstraint;
import net.jini.core.constraint.InvocationConstraints;
import net.jini.core.constraint.ServerAuthentication;
import net.jini.core.constraint.ServerMinPrincipal;
import net.jini.core.discovery.LookupLocator;
import net.jini.discovery.ConstrainableLookupLocator;
import net.jini.jeri.BasicILFactory;
import net.jini.jeri.AtomicILFactory;
import net.jini.jeri.Compression;
import net.jini.jeri.BasicJeriExporter;
import net.jini.jeri.ProxyTrustILFactory;
import net.jini.jeri.ssl.SslServerEndpoint;
import net.jini.security.AccessPermission;
import net.jini.security.AuthenticationPermission;
import net.jini.security.BasicProxyPreparer;

multicast {
    private ttl = 1;
}

principal {
    /* 
     * JAAS principals
     */
    private static tester_keystore = KeyStores.getKeyStore(
	"file:${qa.home}/harness/trust/tester.keystore",
	"pkcs12", "testerpw");
    private static reggie_keystore = KeyStores.getKeyStore(
	"file:${qa.home}/harness/trust/reggie.keystore",
	"pkcs12", "reggiepw");
    private static phoenix_keystore = KeyStores.getKeyStore(
	"file:${qa.home}/harness/trust/phoenix.keystore",
	"pkcs12", "phoenixpw");
    static phoenix = KeyStores.getX500Principal("phoenix", phoenix_keystore);
    static tester = KeyStores.getX500Principal("tester", tester_keystore);
    static reggie = KeyStores.getX500Principal("reggie", reggie_keystore);
} // principal

org.apache.river.reggie {
    /*
     * Test or test harness specific entries
     */
    locatorConstraints = discoveryConstraints;

    /*
     * JAAS login context
     */ 
    loginContext = new LoginContext("org.apache.river.Reggie");

    discoveryConstraints = new StringMethodConstraints(
        new StringMethodDesc[] {
            new StringMethodDesc("multicastRequest", new InvocationConstraints(
                new InvocationConstraint[]{
                    ClientAuthentication.YES,
                    Integrity.YES,
                    DiscoveryProtocolVersion.TWO,
                    new MulticastMaxPacketSize(1024),
                    new MulticastTimeToLive(multicast.ttl),
                    new UnicastSocketTimeout(120000) // 2*60*1000
                },
                null
            )),
            new StringMethodDesc("multicastAnnouncement", new InvocationConstraints(
                new InvocationConstraint[] {
                    ServerAuthentication.YES,
                    Integrity.YES,
                    new ServerMinPrincipal(principal.reggie),
                    DiscoveryProtocolVersion.TWO,
                    new MulticastMaxPacketSize(1024),
                    new MulticastTimeToLive(multicast.ttl),
                    new UnicastSocketTimeout(120000) // 2*60*1000
                },
                null
            )),
            new StringMethodDesc("unicastDiscovery", new InvocationConstraints(
                new InvocationConstraint[] {
                    ClientAuthentication.YES,
                    ServerAuthentication.YES,
                    Integrity.YES,
                    new ServerMinPrincipal(principal.reggie),
                    DiscoveryProtocolVersion.TWO,
                    new MulticastMaxPacketSize(1024),
                    new MulticastTimeToLive(multicast.ttl),
                    new UnicastSocketTimeout(120000) // 2*60*1000
                },
                null
            ))
        }
    );

    // use AccessPermission instead of RegistrarPermission to avoid
    // bundling RegistrarPermission into qa1.jar
    multicastRequestSubjectChecker = new ClientPermissionChecker(
        new AccessPermission("multicastRequest"));
    unicastDiscoverySubjectChecker = new ClientPermissionChecker(
        new AccessPermission("unicastDiscovery"));

    private testerConstraints = new StringMethodConstraints(
	new InvocationConstraints(
	    new InvocationConstraint[] {
		Integrity.YES,
                AtomicInputValidation.YES,
		ServerAuthentication.YES,
		new ServerMinPrincipal(principal.tester)
	    },
	    null
	));
    private testerPermissions = new Permission[] {
	new AuthenticationPermission(
	    Collections.singleton(principal.reggie),
	    Collections.singleton(principal.tester),
	    "connect")
	};
    listenerPreparer = new BasicProxyPreparer(
	testerConstraints,
	testerPermissions);

    /*
     * Values for talking to the lookup service 
     */
    private static reggieConstraints =
	new StringMethodConstraints(
	    new InvocationConstraints(
		new InvocationConstraint[] {
		    Integrity.YES,
                    AtomicInputValidation.YES,
		    ServerAuthentication.YES,
		    new ServerMinPrincipal(principal.reggie) 
	    },
	    null
	));
    private static reggiePermissions = new Permission[] {
	new AuthenticationPermission(
	    Collections.singleton(principal.reggie),
	    Collections.singleton(principal.reggie),
	    "connect")
	};
    private reggiePreparer = new BasicProxyPreparer(
	reggieConstraints, 
	reggiePermissions);
    locatorPreparer = reggiePreparer;

    /*
     * Values for talking to the activation system
     */
    private static activationSystemConstraints =
	new StringMethodConstraints(
	    new InvocationConstraints(
		new InvocationConstraint[] {
		    Integrity.YES,
                    AtomicInputValidation.YES,
		    ServerAuthentication.YES,
		    new ServerMinPrincipal(principal.phoenix)
		},
		null
	));
    activationSystemPreparer = 
	new BasicProxyPreparer(
	    activationSystemConstraints, 
	    new Permission[] {
		new AuthenticationPermission(
		    Collections.singleton(principal.reggie),
		    Collections.singleton(principal.phoenix),
		    "connect")
	    }
	);
    activationIdPreparer = new BasicProxyPreparer(
	activationSystemConstraints, null);
} // org.apache.river.reggie

net.jini.lookup.JoinManager {
    registrarPreparer    = org.apache.river.reggie.reggiePreparer;
    registrationPreparer = org.apache.river.reggie.reggiePreparer;
    serviceLeasePreparer = org.apache.river.reggie.reggiePreparer;
}
                       
net.jini.discovery.LookupDiscovery {
    registrarPreparer = org.apache.river.reggie.reggiePreparer;
    multicastInterfaces = new java.net.NetworkInterface[]{};
    discoveryConstraints = new StringMethodConstraints(
        new StringMethodDesc[]{
            new StringMethodDesc("multicastRequest", new InvocationConstraints(
                new InvocationConstraint[]{
                    ClientAuthentication.YES,
                    Integrity.YES,
                    new ClientMinPrincipal(principal.reggie),
                    DiscoveryProtocolVersion.TWO,
                    new MulticastMaxPacketSize(1024),
                    new MulticastTimeToLive(multicast.ttl),
                    new UnicastSocketTimeout(120000) // 2*60*1000
                },
                null
            )),
            new StringMethodDesc("multicastAnnouncement", new InvocationConstraints(
                new InvocationConstraint[]{
                    ServerAuthentication.YES,
                    Integrity.YES,
                    new ServerMinPrincipal(principal.reggie),
                    DiscoveryProtocolVersion.TWO,
                    new MulticastMaxPacketSize(1024),
                    new MulticastTimeToLive(multicast.ttl),
                    new UnicastSocketTimeout(120000) // 2*60*1000
                },
                null
            )),
            new StringMethodDesc("unicastDiscovery", new InvocationConstraints(
                new InvocationConstraint[]{
                    ServerAuthentication.YES,
                    Integrity.YES,
                    new ServerMinPrincipal(principal.reggie),
                    DiscoveryProtocolVersion.TWO,
                    new MulticastMaxPacketSize(1024),
                    new MulticastTimeToLive(multicast.ttl),
                    new UnicastSocketTimeout(120000) // 2*60*1000
                },
                null
            ))
        }
    );
} // net.jini.discovery.LookupDiscovery

net.jini.discovery.LookupLocatorDiscovery {
    registrarPreparer = org.apache.river.reggie.reggiePreparer;
}

exporter {
    name = "org.apache.river.reggie.serverExporter";
    persistentExporter = new BasicJeriExporter(
	SslServerEndpoint.getInstance(0),
        new AtomicILFactory(
            new StringMethodConstraints(
                new InvocationConstraints(
		    Integrity.YES,
                    null)
		),
            AccessPermission.class,
            org.apache.river.reggie.proxy.Registrar.class,
            true,
            Compression.DEFLATE_BEST_COMPRESSION
        )
    );
    transientExporter = persistentExporter;
    activatableExporter = new ActivationExporter(
	(ActivationID) $data,
         persistentExporter,
         org.apache.river.reggie.proxy.Registrar.class
    );
} // exporter
