// this configuration taken from phoenix's javadoc

import org.apache.river.phoenix.*;
import org.apache.river.phoenix.group.*;
import org.apache.river.phoenix.common.*;
import org.apache.river.phoenix.dl.*;
import org.apache.river.config.KeyStores;
import net.jini.constraint.*;
import net.jini.core.constraint.*;
import net.jini.jeri.*;
import net.jini.jeri.*;
import net.jini.jeri.ssl.SslServerEndpoint;
import net.jini.jeri.security.*;
import net.jini.security.*;
import javax.security.auth.login.LoginContext;
import au.net.zeus.rmi.tls.TlsRMIServerSocketFactory;
import au.net.zeus.rmi.tls.TlsRMIClientSocketFactory;

principal {
    /*
     * JAAS principals
     */
    private static tester_keystore = KeyStores.getKeyStore(
	"file:${qa.home}/harness/trust/tester.keystore",
	"pkcs12", "testerpw");
    private static phoenix_keystore = KeyStores.getKeyStore(
	"file:${qa.home}/harness/trust/phoenix.keystore",
	"pkcs12", "phoenixpw");
    static tester = KeyStores.getX500Principal("tester", tester_keystore);
    static phoenix = KeyStores.getX500Principal("phoenix", phoenix_keystore);
} // principal

org.apache.river.phoenix {
    /*
     * JAAS login context
     */
    loginContext = new LoginContext("org.apache.river.Phoenix");

    /**
     * Phoenix config entries
     */
    private sslPort = 2000; // pick one, cannot be 1098
    private daemonEndpoint = SslServerEndpoint.getInstance(sslPort);
    private constraints = new StringMethodConstraints(
	new InvocationConstraints(
            new InvocationConstraint []{
                Integrity.YES,
                AtomicInputValidation.YES
            },
	    null
	));
    private actSysConstraints = new StringMethodConstraints(
	new InvocationConstraints(
            new InvocationConstraint []{
                AtomicInputValidation.YES
            },
	    null
	));

    systemExporter = new BasicJeriExporter(
	daemonEndpoint, 
	new SystemAccessAtomicILFactory(actSysConstraints, null, null, SystemAccessExporter.class),
	false,
	true, 
	PhoenixConstants.ACTIVATION_SYSTEM_UUID);
    activatorExporter = new BasicJeriExporter(
	daemonEndpoint,
	new AtomicILFactory(actSysConstraints, null, SystemAccessExporter.class),
	false,
	true,
	PhoenixConstants.ACTIVATOR_UUID);
    monitorExporter = new BasicJeriExporter(
	daemonEndpoint,
        new AtomicILFactory(actSysConstraints, MonitorPermission.class, SystemAccessExporter.class)
        //new AccessAtomicILFactory(SystemAccessExporter.class)
    );

    registryRmiServerSocketFactory = new TlsRMIServerSocketFactory();
    registryRmiClientSocketFactory = new TlsRMIClientSocketFactory();

    instantiatorPreparer = new BasicProxyPreparer(
        new StringMethodConstraints(
	    new InvocationConstraints(
	        new InvocationConstraint[] {
	            Integrity.YES,
                    AtomicInputValidation.YES,
	            ClientAuthentication.YES,
	            ServerAuthentication.YES,
	            new ServerMinPrincipal(principal.phoenix)
	        },
	        null
	)),
	null);

    //groupTimeout = 1200000;
    //groupOptions = new String[] {
    //    "-Djava.security.properties=/vob/qa/configs/jeri/phoenix/debug-security.props"
    //    ,
    //    "-Djava.security.debug=access,failure"
    //};

   // groupConfig allows passing through configuration to ActivationGroupInit VM.
   // groupConfig = new String []{
   //    "file:${qa.home}${/}harness${/}configs${/}jsse${/}phoenix${/}phoenix.config"
   // };

    /**
     * Group config entries
     */
    private groupEndpoint = SslServerEndpoint.getInstance(0);

    instantiatorExporter = new BasicJeriExporter(
	groupEndpoint,
	new AtomicILFactory(
	    constraints, 
	    InstantiatorPermission.class,
            ActivationGroupImpl.class
	));
    systemPreparer = instantiatorPreparer;
    monitorPreparer = instantiatorPreparer;
    inheritGroupSubject = true;
} // org.apache.river.phoenix

