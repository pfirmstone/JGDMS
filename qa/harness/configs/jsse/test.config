import org.apache.river.config.KeyStores;
import org.apache.river.discovery.ClientPermissionChecker;
import org.apache.river.discovery.DiscoveryProtocolVersion;
import org.apache.river.discovery.MulticastMaxPacketSize;
import org.apache.river.discovery.MulticastTimeToLive;
import org.apache.river.discovery.UnicastSocketTimeout;

import java.util.Collections;

import java.security.Permission;

import javax.security.auth.login.LoginContext;

import net.jini.constraint.StringMethodConstraints;
import net.jini.constraint.StringMethodConstraints.StringMethodDesc;
import net.jini.core.constraint.ConstraintAlternatives;
import net.jini.core.constraint.ClientAuthentication;
import net.jini.core.constraint.ClientMinPrincipal;
import net.jini.core.constraint.Integrity;
import net.jini.core.constraint.InvocationConstraint;
import net.jini.core.constraint.InvocationConstraints;
import net.jini.core.constraint.ServerAuthentication;
import net.jini.core.constraint.ServerMinPrincipal;
import net.jini.core.constraint.ServerMaxPrincipal;
import net.jini.core.constraint.AtomicInputValidation;
import net.jini.jeri.BasicJeriExporter;
import net.jini.jeri.AtomicILFactory;
import net.jini.jeri.Compression;
import net.jini.jeri.ProxyTrustILFactory;
import net.jini.jeri.ssl.SslServerEndpoint;
import net.jini.security.AccessPermission;
import net.jini.security.AuthenticationPermission;
import net.jini.security.BasicProxyPreparer;
import java.security.Principal;

multicast {
    private ttl = 1;
}

principal {
    /*
     * JAAS principals
     */
    private static tester_keystore = KeyStores.getKeyStore(
	"file:${org.apache.river.qa.home}/harness/trust/tester.keystore",
	"pkcs12", "testerpw");
    private static norm_keystore = KeyStores.getKeyStore(
	"file:${org.apache.river.qa.home}/harness/trust/norm.keystore",
	"pkcs12", "normpw");
    private static phoenix_keystore = KeyStores.getKeyStore(
	"file:${org.apache.river.qa.home}/harness/trust/phoenix.keystore",
	"pkcs12", "phoenixpw");
    private static reggie_keystore = KeyStores.getKeyStore(
	"file:${org.apache.river.qa.home}/harness/trust/reggie.keystore",
	"pkcs12", "reggiepw");
    private static mercury_keystore = KeyStores.getKeyStore(
	"file:${org.apache.river.qa.home}/harness/trust/mercury.keystore",
	"pkcs12", "mercurypw");
    private static fiddler_keystore = KeyStores.getKeyStore(
	"file:${org.apache.river.qa.home}/harness/trust/fiddler.keystore",
	"pkcs12", "fiddlerpw");
    private static mahalo_keystore = KeyStores.getKeyStore(
	"file:${org.apache.river.qa.home}/harness/trust/mahalo.keystore",
	"pkcs12", "mahalopw");
    private static outrigger_keystore = KeyStores.getKeyStore(
	"file:${org.apache.river.qa.home}/harness/trust/outrigger.keystore",
	"pkcs12", "outriggerpw");
    static tester = KeyStores.getX500Principal("tester", tester_keystore);
    static norm = KeyStores.getX500Principal("norm", norm_keystore);
    static phoenix = KeyStores.getX500Principal("phoenix", phoenix_keystore);
    static reggie = KeyStores.getX500Principal("reggie", reggie_keystore);
    static mercury = KeyStores.getX500Principal("mercury", mercury_keystore);
    static fiddler = KeyStores.getX500Principal("fiddler", fiddler_keystore);
    static mahalo = KeyStores.getX500Principal("mahalo", mahalo_keystore);
    static outrigger = KeyStores.getX500Principal("outrigger", outrigger_keystore);
} // principal

test {
    /*
     * JAAS login contexts
     */
    loginContext = new LoginContext("org.apache.river.Test");
    // for discovery protocal simulator
    reggieLoginContext = new LoginContext("org.apache.river.Reggie");

    /* the exporter for test listeners */
    integrityExporter = new BasicJeriExporter(
	SslServerEndpoint.getInstance(0),
	new AtomicILFactory(
	    new StringMethodConstraints(
	        new InvocationConstraints(
                    new InvocationConstraint[]{
                        Integrity.YES,
                        AtomicInputValidation.YES}, 
                    null
                )
            ),
	    AccessPermission.class,
            org.apache.river.test.share.BaseQATest.class,
            Compression.DEFLATE
	)
    );

    /* 
     * Reggie defaults
     */
    reggiePreparer = new BasicProxyPreparer(
	new StringMethodConstraints(
	    new InvocationConstraints(
       	        new InvocationConstraint[] {
		    Integrity.YES,
		    ServerAuthentication.YES,
		    new ConstraintAlternatives(
                        new InvocationConstraint[] {
                            new ServerMinPrincipal(principal.phoenix),
                            new ServerMinPrincipal(principal.reggie)
			}
		    )
	        },
	        null
	    )),
	new Permission[] {
	    new AuthenticationPermission(
		Collections.singleton(principal.tester),
		Collections.singleton(principal.reggie),
		"connect")
	    }
	);
    reggieAdminPreparer               = reggiePreparer;
    reggieEventRegistrationPreparer   = new BasicProxyPreparer(); // obsolete
    reggieServiceRegistrationPreparer = reggiePreparer;
    reggieServiceLeasePreparer        = reggiePreparer;
    reggieEventLeasePreparer          = reggiePreparer;
    reggieListenerExporter            = integrityExporter;        

    /*
     * Fiddler defaults
     */
    fiddlerPreparer = new BasicProxyPreparer(
	new StringMethodConstraints(
	    new InvocationConstraints(
       	        new InvocationConstraint[]{
		    Integrity.YES,
		    ServerAuthentication.YES,
		    new ConstraintAlternatives(
                        new InvocationConstraint[] {
                            new ServerMinPrincipal(principal.phoenix),
                            new ServerMinPrincipal(principal.fiddler)
			}
		    )
		},
	        null
	    )),
	new Permission[] {
	    new AuthenticationPermission(
		Collections.singleton(principal.tester),
		Collections.singleton(principal.fiddler),
		"connect")
	    }
	);
    fiddlerRegistrationPreparer      = fiddlerPreparer;
    fiddlerEventRegistrationPreparer = new BasicProxyPreparer();//obsolete
    fiddlerLeasePreparer             = fiddlerPreparer;
    fiddlerAdminPreparer             = fiddlerPreparer;
    fiddlerListenerExporter          = integrityExporter;

    /*
     * Norm defaults
     */
    normPreparer = new BasicProxyPreparer(
	new StringMethodConstraints(
	    new InvocationConstraints(
       	        new InvocationConstraint[]{
		    Integrity.YES,
		    ServerAuthentication.YES,
		    new ConstraintAlternatives(
                        new InvocationConstraint[] {
                            new ServerMinPrincipal(principal.phoenix),
                            new ServerMinPrincipal(principal.norm)
			}
		    )
		},
	    	null
	    )),
	new Permission[] {
	    new AuthenticationPermission(
		Collections.singleton(principal.tester),
		Collections.singleton(principal.norm),
		"connect")
	    }
	);
    normAdminPreparer             = normPreparer;
    normRenewalSetPreparer        = normPreparer;
    normEventRegistrationPreparer = new BasicProxyPreparer();//obsolete
    normLeasePreparer             = normPreparer;
    normListenerExporter          = integrityExporter;

    /*
     * Mahalo defaults
     *
     * Test org/apache/river/test/impl/outrigger/admin/DestroyTestMahalo.td
     * fails if new ServerMinPrincipal(principal.mahalo) constraint is used.
     * Is the preparer being used on the wrong proxy or are the constraints
     * being used on another proxy that's deserialized via AtomicSerial?  
     * Or is there a problem with Server authentication?
     *
     * Do we need a ServerMaxPrincipal constraint to allow other services to be
     * utilised?
     */
    mahaloPreparer = new BasicProxyPreparer(
	new StringMethodConstraints(
	    new InvocationConstraints(
       	        new InvocationConstraint[] {
		    Integrity.YES,
		    ServerAuthentication.YES,
                    new ConstraintAlternatives(
                        new InvocationConstraint[] {
                            new ServerMinPrincipal(principal.phoenix),
                            new ServerMinPrincipal(principal.mahalo)
			}
		    )
		},
	        null
	    )),
	new Permission[] {
	    new AuthenticationPermission(
		Collections.singleton(principal.tester),
		Collections.singleton(principal.mahalo),
		"connect")
	    }
	);

    mahaloLeasePreparer = new BasicProxyPreparer(
	new StringMethodConstraints(
	    new InvocationConstraints(
       	        new InvocationConstraint[] {
		    Integrity.YES,
		    ServerAuthentication.YES,
		    new ConstraintAlternatives(
                        new InvocationConstraint[] {
                            new ServerMinPrincipal(principal.phoenix),
                            new ServerMinPrincipal(principal.mahalo)
			}
		    )
		},
	        null
	    )),
	new Permission[] {
	    new AuthenticationPermission(
		Collections.singleton(principal.tester),
		Collections.singleton(principal.mahalo),
		"connect")
	    }
	);

    mahaloAdminPreparer = new BasicProxyPreparer(
	new StringMethodConstraints(
	    new InvocationConstraints(
       	        new InvocationConstraint[] {
		    Integrity.YES,
		    ServerAuthentication.YES,
		    new ServerMinPrincipal(principal.mahalo)
		},
	        null
	    )),
	new Permission[] {
	    new AuthenticationPermission(
		Collections.singleton(principal.tester),
		Collections.singleton(principal.mahalo),
		"connect")
	    }
	);

    /*
     * Outrigger defaults
     */
    outriggerPreparer = new BasicProxyPreparer(
	new StringMethodConstraints(
	    new InvocationConstraints(
       	        new InvocationConstraint[] {
		    Integrity.YES,
		    ServerAuthentication.YES,
		    new ConstraintAlternatives(
                        new InvocationConstraint[] {
                            new ServerMinPrincipal(principal.phoenix),
                            new ServerMinPrincipal(principal.outrigger)
			}
		    )
		},
	        null
	    )),
	new Permission[] {
	    new AuthenticationPermission(
		Collections.singleton(principal.tester),
		Collections.singleton(principal.outrigger),
		"connect")
	    }
	);
    outriggerLeasePreparer             = outriggerPreparer;
    outriggerAdminPreparer             = outriggerPreparer;
    outriggerEventRegistrationPreparer = new BasicProxyPreparer(); //obsolete
    outriggerListenerExporter          = integrityExporter;

    /*
     * Mercury defaults
     */
    mercuryPreparer = new BasicProxyPreparer(
	new StringMethodConstraints(
	    new InvocationConstraints(
       	        new InvocationConstraint[] {
		    Integrity.YES,
		    ServerAuthentication.YES,
		    new ConstraintAlternatives(
                        new InvocationConstraint[] {
                            new ServerMinPrincipal(principal.phoenix),
                            new ServerMinPrincipal(principal.mercury)
			}
		    )
		},
	        null
	    )),
	new Permission[] {
	    new AuthenticationPermission(
		Collections.singleton(principal.tester),
		Collections.singleton(principal.mercury),
		"connect")
	    }
	);
    mercuryAdminPreparer        = mercuryPreparer;
    mercuryListenerPreparer     = mercuryPreparer;
    mercuryLeasePreparer        = mercuryPreparer;
    mercuryRegistrationPreparer = mercuryPreparer;
    mercuryListenerExporter     = integrityExporter;

    /* 
     * Phoenix defaults 
     */
    phoenixPreparer = new BasicProxyPreparer(
	new StringMethodConstraints(
	    new InvocationConstraints(
       	        new InvocationConstraint[] {
		    Integrity.YES,
		    ServerAuthentication.YES,
		    new ServerMinPrincipal(principal.phoenix)
		},
	        null
	    )),
	new Permission[] {
	    new AuthenticationPermission(
		Collections.singleton(principal.tester),
		Collections.singleton(principal.phoenix),
		"connect")
	    }
	);

    /*
     * Shared group defaults
     */
    groupPreparer = new BasicProxyPreparer(
	new StringMethodConstraints(
	    new InvocationConstraints(
       	        new InvocationConstraint[] {
		    Integrity.YES,
		    ServerAuthentication.YES,
		    new ServerMinPrincipal(principal.tester)
		},
	        null
	    )),
	new Permission[] {
	    new AuthenticationPermission(
		Collections.singleton(principal.tester),
		Collections.singleton(principal.tester),
		"connect")
	    }
	); 

    /*
     * Transaction defaults 
     */
    transactionParticipantExporter = integrityExporter;

    /* 
     * Test lease defaults 
     */
    leaseExporter = integrityExporter;

    /*
     * Discovery constraints for discovery simulator (as reggie) 
     */
    discoveryConstraints = new StringMethodConstraints(
        new StringMethodDesc[]{
            new StringMethodDesc("multicastRequest", new InvocationConstraints(
                new InvocationConstraint[]{
                    ClientAuthentication.YES,
                    Integrity.YES,
                    DiscoveryProtocolVersion.TWO,
                    new MulticastMaxPacketSize(1024),
                    new MulticastTimeToLive(multicast.ttl),
                    new UnicastSocketTimeout(120000) // 2*60*1000
                },
                null
            )),
            new StringMethodDesc("multicastAnnouncement", new InvocationConstraints(
                new InvocationConstraint[]{
                    ServerAuthentication.YES,
                    Integrity.YES,
                    new ServerMinPrincipal(principal.reggie),
                    DiscoveryProtocolVersion.TWO,
                    new MulticastMaxPacketSize(1024),
                    new MulticastTimeToLive(multicast.ttl),
                    new UnicastSocketTimeout(120000) // 2*60*1000
                },
                null
            )),
            new StringMethodDesc("unicastDiscovery", new InvocationConstraints(
                new InvocationConstraint[]{
                    ClientAuthentication.YES,
                    ServerAuthentication.YES,
                    Integrity.YES,
                    new ServerMinPrincipal(principal.reggie),
                    DiscoveryProtocolVersion.TWO,
                    new MulticastMaxPacketSize(1024),
                    new MulticastTimeToLive(multicast.ttl),
                    new UnicastSocketTimeout(120000) // 2*60*1000
                },
                null
            ))
        }
    );

    // use AccessPermission instead of RegistrarPermission to
    // avoid packaging headaches
    multicastRequestSubjectChecker = new ClientPermissionChecker(
        new AccessPermission("multicastRequest"));
    unicastDiscoverySubjectChecker = new ClientPermissionChecker(
        new AccessPermission("unicastDiscovery"));

    /*
     * Discovery constraints for constructed locators (as tester) 
     */
    locatorConstraints = new StringMethodConstraints(
        new StringMethodDesc[]{
            new StringMethodDesc("multicastRequest", new InvocationConstraints(
                new InvocationConstraint[]{
                    ClientAuthentication.YES,
                    Integrity.YES,
                    new ClientMinPrincipal(principal.tester),
                    DiscoveryProtocolVersion.TWO,
                    new MulticastMaxPacketSize(1024),
                    new MulticastTimeToLive(multicast.ttl),
                    new UnicastSocketTimeout(120000) // 2*60*1000
                },
                null
            )),
            new StringMethodDesc("multicastAnnouncement", new InvocationConstraints(
                new InvocationConstraint[]{
                    ServerAuthentication.YES,
                    Integrity.YES,
                    new ServerMinPrincipal(principal.reggie),
                    DiscoveryProtocolVersion.TWO,
                    new MulticastMaxPacketSize(1024),
                    new MulticastTimeToLive(multicast.ttl),
                    new UnicastSocketTimeout(120000) // 2*60*1000
                },
                null
            )),
            new StringMethodDesc("unicastDiscovery", new InvocationConstraints(
                new InvocationConstraint[]{
                    ServerAuthentication.YES,
                    Integrity.YES,
                    new ServerMinPrincipal(principal.reggie),
                    DiscoveryProtocolVersion.TWO,
                    new MulticastMaxPacketSize(1024),
                    new MulticastTimeToLive(multicast.ttl),
                    new UnicastSocketTimeout(120000) // 2*60*1000
                },
                null
            )),
            new StringMethodDesc("getRegistrar", new InvocationConstraints(
                new InvocationConstraint[]{
                    ServerAuthentication.YES,
                    Integrity.YES,
                    //new ServerMinPrincipal(principal.reggie),
                    DiscoveryProtocolVersion.TWO,
                    new MulticastMaxPacketSize(1024),
                    new MulticastTimeToLive(multicast.ttl),
                    new UnicastSocketTimeout(120000) // 2*60*1000
                },
                null
            ))
        }
    );

    /* exporter for codebases and test lease verifiers */
    codebaseExporter = new BasicJeriExporter(
	SslServerEndpoint.getInstance(0),
	new AtomicILFactory(
	    new StringMethodConstraints(
	        new InvocationConstraints(
                    new InvocationConstraint[]{
                        Integrity.YES,
                        AtomicInputValidation.YES}, 
                    null
                )
            ),
	    AccessPermission.class,
            org.apache.river.test.share.BaseQATest.class
	),
        true,
        true
    );
    testLeaseVerifierExporter = integrityExporter;
} // test

net.jini.discovery.LookupDiscovery {
    registrarPreparer    = test.reggiePreparer;
    discoveryConstraints = test.locatorConstraints;
}

net.jini.discovery.LookupLocatorDiscovery {
    registrarPreparer =  test.reggiePreparer;
}

net.jini.lookup.ServiceDiscoveryManager {
    registrarPreparer     = test.reggiePreparer;
    eventLeasePreparer    = test.reggiePreparer;
    eventListenerExporter = test.integrityExporter;
}

net.jini.lookup.JoinManager {
    registrarPreparer    = test.reggiePreparer;
}

org.apache.river.test.impl.mercury.listener {
    exporter =
    new BasicJeriExporter(
	SslServerEndpoint.getInstance(0),
	new AtomicILFactory(
	    new StringMethodConstraints(
	        new InvocationConstraints(
                    new InvocationConstraint[]{
                        Integrity.YES,
                        AtomicInputValidation.YES}, 
                    null
                )
            ),
	    AccessPermission.class,
            org.apache.river.test.impl.mercury.TestListener.class
	),
        false,
        true
    );
}
