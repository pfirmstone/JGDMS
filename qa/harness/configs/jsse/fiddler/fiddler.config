import org.apache.river.config.KeyStores;
import org.apache.river.discovery.DiscoveryProtocolVersion;
import org.apache.river.discovery.MulticastMaxPacketSize;
import org.apache.river.discovery.MulticastTimeToLive;
import org.apache.river.discovery.UnicastSocketTimeout;

import java.util.Collections;

import java.security.Permission;

import net.jini.activation.arg.ActivationID;

import javax.security.auth.login.LoginContext;
import javax.security.auth.x500.X500Principal;

import net.jini.activation.ActivationExporter;
import net.jini.constraint.StringMethodConstraints;
import net.jini.constraint.StringMethodConstraints.StringMethodDesc;
import net.jini.core.constraint.ClientAuthentication;
import net.jini.core.constraint.ClientMinPrincipal;
import net.jini.core.constraint.Integrity;
import net.jini.core.constraint.InvocationConstraint;
import net.jini.core.constraint.InvocationConstraints;
import net.jini.core.constraint.ServerAuthentication;
import net.jini.core.constraint.ServerMinPrincipal;
import net.jini.core.discovery.LookupLocator;
import net.jini.discovery.ConstrainableLookupLocator;
import net.jini.jeri.BasicILFactory;
import net.jini.jeri.AtomicILFactory;
import net.jini.jeri.BasicJeriExporter;
import net.jini.jeri.ProxyTrustILFactory;
import net.jini.jeri.ssl.SslServerEndpoint;
import net.jini.security.AccessPermission;
import net.jini.security.AuthenticationPermission;
import net.jini.security.BasicProxyPreparer;

multicast {
    private ttl = 1;
}

principal {
    /* 
     * JAAS principals
     */   
    private static tester_keystore = KeyStores.getKeyStore(
	"file:${org.apache.river.qa.home}/harness/trust/tester.keystore",
	"pkcs12", "testerpw");  
    private static phoenix_keystore = KeyStores.getKeyStore(
	"file:${org.apache.river.qa.home}/harness/trust/phoenix.keystore",
	"pkcs12", "phoenixpw");
    private static reggie_keystore = KeyStores.getKeyStore(
	"file:${org.apache.river.qa.home}/harness/trust/reggie.keystore",
	"pkcs12", "reggiepw");   
    private static fiddler_keystore = KeyStores.getKeyStore(
	"file:${org.apache.river.qa.home}/harness/trust/fiddler.keystore",
	"pkcs12", "fiddlerpw");
    
    static tester = KeyStores.getX500Principal("tester", tester_keystore);  
    static phoenix = KeyStores.getX500Principal("phoenix", phoenix_keystore);
    static reggie = KeyStores.getX500Principal("reggie", reggie_keystore);   
    static fiddler = KeyStores.getX500Principal("fiddler", fiddler_keystore);
    
}

org.apache.river.fiddler {
    /*
     * Test or test harness specific entries
     */
    locatorConstraints = 
	net.jini.discovery.LookupDiscovery.discoveryConstraints;

    /* 
     * JAAS login context
     */
    loginContext = new LoginContext("org.apache.river.Fiddler");

    private testerConstraints = new StringMethodConstraints(
	new InvocationConstraints(
	    new InvocationConstraint[] {
	        Integrity.YES,
	        ServerAuthentication.YES,
	        new ServerMinPrincipal(principal.tester)
	    },
	    null
        ));
    private testerPermissions = new Permission[] {
	new AuthenticationPermission(
	    Collections.singleton(principal.fiddler),
	    Collections.singleton(principal.tester),
	    "connect")
	};
    listenerPreparer = new BasicProxyPreparer(
	testerConstraints,
	testerPermissions);
    recoveredListenerPreparer = new BasicProxyPreparer(
	testerPermissions);

    /*
     * Values for talking to the lookup service - lots missing
     */
    private static reggieConstraints = new StringMethodConstraints(
	new InvocationConstraints(
	    new InvocationConstraint[] {
		Integrity.YES,
		ServerAuthentication.YES,
		new ServerMinPrincipal(principal.reggie) 
	    },
	    null
	));
    private reggiePermissions = new Permission[] {
	new AuthenticationPermission(
	    Collections.singleton(principal.fiddler),
	    Collections.singleton(principal.reggie),
	    "connect")
	};
    private reggiePreparer = new BasicProxyPreparer(
	reggieConstraints,
	reggiePermissions);

    locatorToJoinPreparer = reggiePreparer;
    recoveredLocatorToJoinPreparer = new BasicProxyPreparer(
	reggiePermissions);

    locatorToDiscoverPreparer          = locatorToJoinPreparer;
    recoveredLocatorToDiscoverPreparer = recoveredLocatorToJoinPreparer;

    /*
     * Values for talking to the activation system
     */
    private static activationSystemConstraints = new StringMethodConstraints(
	new InvocationConstraints(
	    new InvocationConstraint[] {
		Integrity.YES,
		ServerAuthentication.YES,
		new ServerMinPrincipal(principal.phoenix) 
	    },
	    null
	));
    activationSystemPreparer = new BasicProxyPreparer(
	activationSystemConstraints, 
	new Permission[] {
	    new AuthenticationPermission(
		Collections.singleton(principal.fiddler),
		Collections.singleton(principal.phoenix),
		"connect")
	    }
	);
    activationIdPreparer = new BasicProxyPreparer(
	activationSystemConstraints, 
	null);
} // org.apache.river.fiddler

net.jini.lookup.JoinManager {
    registrarPreparer    = org.apache.river.fiddler.reggiePreparer;
    registrationPreparer = org.apache.river.fiddler.reggiePreparer;
    serviceLeasePreparer = org.apache.river.fiddler.reggiePreparer;
}
		       
net.jini.discovery.LookupDiscovery {
    registrarPreparer    = org.apache.river.fiddler.reggiePreparer;
    discoveryConstraints = new StringMethodConstraints(
        new StringMethodDesc[]{
            new StringMethodDesc("multicastRequest", new InvocationConstraints(
                new InvocationConstraint[]{
                    ClientAuthentication.YES,
                    Integrity.YES,
                    new ClientMinPrincipal(principal.fiddler),
                    DiscoveryProtocolVersion.TWO,
                    new MulticastMaxPacketSize(1024),
                    new MulticastTimeToLive(multicast.ttl),
                    new UnicastSocketTimeout(120000) // 2*60*1000
                },
                null
            )),
            new StringMethodDesc("multicastAnnouncement", new InvocationConstraints(
                new InvocationConstraint[]{
                    ServerAuthentication.YES,
                    Integrity.YES,
                    new ServerMinPrincipal(principal.reggie),
                    DiscoveryProtocolVersion.TWO,
                    new MulticastMaxPacketSize(1024),
                    new MulticastTimeToLive(multicast.ttl),
                    new UnicastSocketTimeout(120000) // 2*60*1000
                },
                null
            )),
            new StringMethodDesc("unicastDiscovery", new InvocationConstraints(
                new InvocationConstraint[]{
                    ServerAuthentication.YES,
                    Integrity.YES,
                    new ServerMinPrincipal(principal.reggie),
                    DiscoveryProtocolVersion.TWO,
                    new MulticastMaxPacketSize(1024),
                    new MulticastTimeToLive(multicast.ttl),
                    new UnicastSocketTimeout(120000) // 2*60*1000
                },
                null
            ))
        }
    );
} // net.jini.discovery.LookupDiscovery

net.jini.discovery.LookupLocatorDiscovery {
    registrarPreparer = org.apache.river.fiddler.reggiePreparer;
}

exporter {
    name = "org.apache.river.fiddler.serverExporter";
    persistentExporter = new BasicJeriExporter(
	SslServerEndpoint.getInstance(0),
        new AtomicILFactory(
            new StringMethodConstraints(
        	new InvocationConstraints(
		    Integrity.YES,
        	    null
		)
	    ),
            AccessPermission.class,
            org.apache.river.fiddler.proxy.Fiddler.class,
            true
	)
    );
    transientExporter = persistentExporter;
    activatableExporter = new ActivationExporter(
	(ActivationID) $data, persistentExporter);
}
