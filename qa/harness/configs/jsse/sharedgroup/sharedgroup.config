import org.apache.river.config.KeyStores;
import org.apache.river.discovery.DiscoveryProtocolVersion;
import org.apache.river.discovery.MulticastMaxPacketSize;
import org.apache.river.discovery.MulticastTimeToLive;
import org.apache.river.discovery.UnicastSocketTimeout;

import java.util.Collections;

import java.security.Permission;

import net.jini.activation.arg.ActivationID;

import javax.security.auth.login.LoginContext;

import net.jini.activation.ActivationExporter;
import net.jini.constraint.StringMethodConstraints;
import net.jini.core.constraint.Integrity;
import net.jini.core.constraint.InvocationConstraint;
import net.jini.core.constraint.InvocationConstraints;
import net.jini.core.constraint.ServerAuthentication;
import net.jini.core.constraint.ServerMinPrincipal;
import net.jini.core.discovery.LookupLocator;
import net.jini.discovery.ConstrainableLookupLocator;
import net.jini.jeri.BasicILFactory;
import net.jini.jeri.AtomicILFactory;
import net.jini.jeri.BasicJeriExporter;
import net.jini.jeri.ProxyTrustILFactory;
import net.jini.jeri.ssl.SslServerEndpoint;
import net.jini.security.AccessPermission;
import net.jini.security.AuthenticationPermission;
import net.jini.security.BasicProxyPreparer;
import org.apache.river.start.group.SharedGroup;

principal {
    /*
     * JAAS principals
     */
    private static tester_keystore = KeyStores.getKeyStore(
	"file:${org.apache.river.qa.home}/harness/trust/tester.keystore",
	"pkcs12", "testerpw");
    private static phoenix_keystore = KeyStores.getKeyStore(
	"file:${org.apache.river.qa.home}/harness/trust/phoenix.keystore",
	"pkcs12", "phoenixpw");
    static tester = KeyStores.getX500Principal("tester", tester_keystore);
    static phoenix = KeyStores.getX500Principal("phoenix", phoenix_keystore);
} // principal

org.apache.river.start.group {
    /*
     * JAAS login context
     */
    loginContext = new LoginContext("org.apache.river.Test");

    /*
     * Values for talking to the activation system
     */
    private static activationSystemConstraints =
        new StringMethodConstraints(
            new InvocationConstraints(
                new InvocationConstraint[] {
                    Integrity.YES,
                    ServerAuthentication.YES,
                    new ServerMinPrincipal(principal.phoenix) 
		},
                null
	));
    activationSystemPreparer =
        new BasicProxyPreparer(
            activationSystemConstraints,
            new Permission[] {
                new AuthenticationPermission(
		    Collections.singleton(principal.tester),
		    Collections.singleton(principal.phoenix),
		    "connect")
            }
	);
    activationIdPreparer = new BasicProxyPreparer(
	activationSystemConstraints, 
	null);
} // org.apache.river.start.group

exporter {
    name = "org.apache.river.start.group.exporter";
    persistentExporter =
	new BasicJeriExporter(
	    SslServerEndpoint.getInstance(0),
	    new AtomicILFactory(
                new StringMethodConstraints(
                    new InvocationConstraints(
			new InvocationConstraint[] {
			    Integrity.YES
			}, 
			null
		)),
		AccessPermission.class,
                SharedGroup.class
	));
    transientExporter = persistentExporter;
    activatableExporter = new ActivationExporter(
	(ActivationID)$data, persistentExporter);
}
