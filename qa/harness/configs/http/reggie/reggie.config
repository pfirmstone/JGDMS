/* Configuration file for configuring a Reggie service that uses
 * JERI for remote communication.
 *
 * This file will be specified as the configuration contained in
 * the 'data' parameter input to the activate() method of
 * org.apache.river.reggie.PersistentRegistrarImpl.
 *
 * To use this configuration, this file should be specified in the
 * following way:
 *
 * net.jini.lookup.core.ServiceRegistrar.serviceConfiguration=reggie/reggie.config
 *
 * Note that because PersistentRegistrarImpl is a remote object that is
 * exported, an exporter must be specified. And because PersistentRegistrarImpl
 * retrieves and interacts with the activation system, a preparer
 * for the proxy to the activation system must also be specified.
 *
 * Also note that the test harness framework itself imposes the
 * following configuration requirement. Once the ServiceStarter
 * framework has started a service, the harness' service starter
 * admin retrieves from the ServiceStarter, a reference (i.e. a proxy)
 * to the started service. Prior to interacting with the service
 * through that proxy, the harness prepares the proxy. Thus, a proxy
 * preparer for the service's proxy must be specified in this file.
 * (For details, refer to the start() method of either,
 * org.apache.river.qa.harness.ActivatableServiceStarterAdmin or
 * org.apache.river.qa.harness.NonActivatableServiceStarterAdmin).
 */
import net.jini.discovery.ConstrainableLookupLocator;
import net.jini.core.discovery.LookupLocator;
import net.jini.activation.ActivationExporter;
import net.jini.jeri.BasicILFactory;
import net.jini.jeri.BasicJeriExporter;
import net.jini.security.BasicProxyPreparer;
import net.jini.jeri.http.HttpServerEndpoint;
import net.jini.activation.arg.ActivationID;
import net.jini.constraint.BasicMethodConstraints;
import net.jini.constraint.BasicMethodConstraints.MethodDesc;
import net.jini.core.constraint.InvocationConstraint;
import net.jini.core.constraint.InvocationConstraints;
import org.apache.river.discovery.MulticastTimeToLive;

multicast {
    private ttl = 1;
}

/* Items required by the test harness framework:
 * 
 * - special configuration item used by the test harness
 *   framework to dynamically generate unique directory paths
 *   for the service's persistence directory.
 */

/* Items required by the service */
org.apache.river.reggie {
    locatorConstraints = net.jini.discovery.LookupDiscovery.discoveryConstraints;
    discoveryConstraints = net.jini.discovery.LookupDiscovery.discoveryConstraints;
    activationSystemPreparer = new BasicProxyPreparer();
    activationIdPreparer = new BasicProxyPreparer();
}

net.jini.lookup.JoinManager {
    registrarPreparer = new BasicProxyPreparer();
    registrationPreparer = new BasicProxyPreparer();
    serviceLeasePreparer = new BasicProxyPreparer();
}

net.jini.discovery.LookupDiscovery {
    registrarPreparer = new BasicProxyPreparer();
    multicastInterfaces = new java.net.NetworkInterface[]{};
    discoveryConstraints = new BasicMethodConstraints(
        new MethodDesc[] {
            new MethodDesc(new InvocationConstraints(
                new InvocationConstraint[] {
                    new MulticastTimeToLive(multicast.ttl)
                },
                null
            ))
        }
    );
}

net.jini.discovery.LookupLocatorDiscovery {
    registrarPreparer = new BasicProxyPreparer();
}

exporter {
    name = "org.apache.river.reggie.serverExporter";
    activatableExporter = new ActivationExporter(
		      (ActivationID) $data,
		      new BasicJeriExporter(HttpServerEndpoint.getInstance(0),
					    new BasicILFactory(),
					    false,
					    true));
    persistentExporter = new BasicJeriExporter(HttpServerEndpoint.getInstance(0),
				    new BasicILFactory(),
				    false,
				    true);
    transientExporter = persistentExporter;
}
