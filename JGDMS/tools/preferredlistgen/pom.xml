<?xml version="1.0" encoding="UTF-8"?>
<!--
~ Copyright (C) 2014 the original author or authors.
~
~ Licensed under the Apache License, Version 2.0 (the "License");
~ you may not use this file except in compliance with the License.
~ You may obtain a copy of the License at
~
~ http://www.apache.org/licenses/LICENSE-2.0
~
~ Unless required by applicable law or agreed to in writing, software
~ distributed under the License is distributed on an "AS IS" BASIS,
~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
~ See the License for the specific language governing permissions and
~ limitations under the License.
-->
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <parent>
        <groupId>au.net.zeus.jgdms</groupId>
        <artifactId>tools</artifactId>
        <version>3.1.1-SNAPSHOT</version>
    </parent>

    <groupId>au.net.zeus.jgdms.tools</groupId>
    <artifactId>preferredlistgen</artifactId>

    <name>Tool :: Preferred classes list generator</name>
    <description>Tool used to generate the preferred class information for downloadable JAR
        files in the form of a META-INF/PREFERRED.LIST required for use by the {@link
        net.jini.loader.pref.PreferredClassLoader}. The list is generated by
        examining the dependencies of classes contained within a target JAR file and
        zero or more additional supporting JAR files.  Through various command-line
        options, a set of "root" classes are identified as belonging to a public API.
        These root classes provide the starting point for recursively computing a
        dependency graph, finding all of the classes referenced in the public API of
        the root classes, finding all of the classes referenced in turn by the public
        API of those classes, and so on, until no new classes are found.  The results
        of the dependency analysis are combined with the preferred list information
        in the additional supporting JAR files to compute a preferred list having the
        smallest number of entries that describes the preferred state of the classes
        and resources contained in all of the JAR files. The output of the tool is a
        new version of the target JAR file containing the generated preferred list,
        and/or a copy of the list printed to System.out.
    </description>

    <dependencies>       


    </dependencies>

    <build>
        <plugins>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-jar-plugin</artifactId>
                <configuration>
                    <archive>                
                        <manifestEntries>
                            <Main-Class>org.apache.river.tool.PreferredListGen</Main-Class>
                            <Implementation-Version>${project.version}</Implementation-Version>
                        </manifestEntries>
                    </archive>
                </configuration>
            </plugin>  

             <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-source-plugin</artifactId>
                <executions>
                    <execution>
                        <id>attach-sources</id>
                        <phase>verify</phase>
                        <goals>
                            <goal>jar-no-fork</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <artifactId>maven-compiler-plugin</artifactId>
                <configuration>
                        <source>8</source>
                        <profile>compact1</profile>
                        <target>8</target>
                        <debug>true</debug>
                        <optimize>true</optimize>
                        <encoding>UTF-8</encoding>
                        <meminitial>128m</meminitial>
                        <maxmem>1024m</maxmem>
                    </configuration>
            </plugin>
        </plugins>
    </build>
</project>
